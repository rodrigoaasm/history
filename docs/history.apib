FORMAT: 1A
HOST: http://localhost:8000/history

# History

This service is intended to provide an easy way to consume data associated to
device attributes, such as temperature readinds, and notifications sent by
other services.

Note: The dates on this service use ISO 8601.

# Group Retrieve data from attributes

This endpoint retrieves the last (or first) values associated to a device. The query
string might select more than one attribute. For instance:

`?lastN=3&attr=temperature,pressure` will return the last 3 values from both
`temperature` and `pressure` attributes.

`?firstN=3&attr=temperature,pressure` will return the first 3 values (the oldest ones) from both
`temperature` and `pressure` attributes.

__Note that__ when the `firstN` parameter is informed, the query returns the
first records that were inserted in the database, that is, the oldest ones are
returned first in the list. In this way, we have an ascending order in relation
to the timestamp.<br>
When the `lastN` parameter is informed, the query returns the last records that
were inserted in the database, that is, the newest ones are returned first in
the list. In this way, we have a descending order in relation to the timestamp.

If no query string is set, then all values from all attributes are returned.


## Filter by last N values and only one attribute  [/device/{device_id}/history?lastN={lastN}&attr={attr}&dateFrom={dateFrom}&dateTo={dateTo}]

+ Parameters
    + device_id:b374a5 (required, string) - Device identifier
    + attr:temperature (optional, string) - Device attribute to be requested. If not used, returns all attributes. (It can be a comma-separated list of attributes.)
    + dateFrom:`2018-06-05T18:00:00Z` (optional, string) - Start time of a time-based query
    + dateTo:`2018-06-15T18:00:00Z` (optional, string) - End time of a time-based query
    + lastN:3 (optional, number) - Number of most current values (valid for each attribute, if more than one). You can use lastN with or without dateFrom/dateTo.


### Filter by last N values and only one attribute [GET]

+ Request (application/json)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=UTF-8)

  + body

            [
              {
                "device_id": "b374a5",
                "ts": "2018-02-14T13:43:33.306000Z",
                "metadata": {
                    "protocol": "mqtt",
                    "payload": "json"
                },
                "value": "22.12",
                "attr": "temperature"
              },
              {
                "device_id": "b374a5",
                "ts": "2018-02-14T13:42:33.306000Z",
                "metadata": {
                    "protocol": "mqtt",
                    "payload": "json"
                },
                "value": "23.12",
                "attr": "temperature"
              },
              {
                "device_id": "b374a5",
                "ts": "2018-02-14T13:41:33.306000Z",
                "metadata": {
                    "protocol": "mqtt",
                    "payload": "json"
                },
                "value": "24.10",
                "attr": "temperature"
              }
            ]

+ Response 200 (text/csv; charset=UTF-8)

  + body
    "attr","value","device_id","ts","metadata.protocol","metadata.payload"
    "temperature",22.12,"b374a5","2018-02-14T13:43:33.306000Z","mqtt","json" 
    "temperature",23.12,"b374a5","2018-02-14T13:42:33.306000Z","mqtt","json"
    "temperature",24.10,"b374a5","2018-02-14T13:42:33.306000Z","mqtt","json"

+ Response 404 (application/json; charset=UTF-8)

  This does not mean that there is no such device in the dojot, just that there is no history for that device yet.

  + body

            {
              "title": "Device not found",
              "description": "No data for the given device could be found"
            }

+ Response 404 (application/json; charset=UTF-8)

  This does not mean that there is no such attribute on the device, only that there is no history for that attribute yet.

  + body

            {
                "title": "Attr not found",
                "description": "No data for the given attribute could be found"
            }

## Filter by first N values and somes attributes  [/device/{device_id}/history?firstN={firstN}&attr={attr}&dateFrom={dateFrom}&dateTo={dateTo}]

+ Parameters
    + device_id:b374a5 (required, string) - Device identifier
    + attr:`temperature,pressure` (optional, string) - Device attribute to be requested. If not used, returns all attributes. (It can be a comma-separated list of attributes.)
    + dateFrom:`2010-01-01T00:00:00Z` (optional, string) - Start time of a time-based query
    + dateTo:`2018-06-15T18:00:00Z` (optional, string) - End time of a time-based query
    + firstN:3 (optional, number) - Number of oldest values (valid for each attribute, if more than one). You can use firstN with or without dateFrom/dateTo.


### Filter by first N values and somes attributes [GET]

+ Request (application/json)
  + Headers

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=UTF-8)

  + body
            {
              "temperature":
                [
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:11:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "24.10",
                    "attr": "temperature"
                  },
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:12:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "23.12",
                    "attr": "temperature"
                  },
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:13:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "22.12",
                    "attr": "temperature"
                  }
                ],
              "pressure":
                [
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:11:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "1053",
                    "attr": "pressure"
                  },
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:12:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "1033",
                    "attr": "pressure"
                  },
                  {
                    "device_id": "b374a5",
                    "ts": "2010-01-01T10:13:22.306000Z",
                    "metadata": {
                        "protocol": "mqtt",
                        "payload": "json"
                    },
                    "value": "1013",
                    "attr": "pressure"
                  }
                ]
            }

+ Response 200 (application/json; charset=UTF-8)

  If there is no data for the filter used.

  + body
            {
              "temperature":
                [
                ],
              "pressure":
                [
                ]
            }

+ Response 200 (text/csv; charset=UTF-8)

  + body
    "attr","value","device_id","ts","metadata.protocol","metadata.payload"
    "temperature",24.10,"b374a5","2010-01-01T10:11:22.306000Z","mqtt","json" 
    "temperature",23.12,"b374a5","2010-01-01T10:12:22.306000Z","mqtt","json"
    "temperature",22.12,"b374a5","2010-01-01T10:13:22.306000Z,"mqtt","json"   
    "pressure",1053,"b374a5","2010-01-01T10:11:22.306000Z","mqtt","json" 
    "pressure",1033,"b374a5","2010-01-01T10:12:22.306000Z","mqtt","json"
    "pressure",1013,"b374a5","2010-01-01T10:13:22.306000Z,"mqtt","json"

            
+ Response 200 (application/json; charset=UTF-8)

  If there is no data for the filter used.

  + body
    ""

+ Response 404 (application/json; charset=UTF-8)

  This does not mean that there is no such device in the dojot, just that there is no history for that device yet.

  + body

            {
              "title": "Device not found",
              "description": "No data for the given device could be found"
            }


## Group Retrieving notifications

This endpoint retrieves the last notifications generated by services. As each
notification might have different attributes, it is possible to filter them
and select only those needed by a particular application.

## Get notifications from a tenant [/notifications/history?limit={limit}&dateFrom={dateFrom}&dateTo={dateTo}]

+ Parameters
    + limit:3 (optional, number) - Maximum number of results (if this parameter is not used returns the last 10 or all in the interval between dateFrom and dateTo if they are used).
    + dateFrom:`2021-09-23T00:00:00Z` (optional, string) - Start time of a time-based query.
    + dateTo:`2021-09-24T18:00:00Z` (optional, string) - End time of a time-based query.

### Get notifications from a tenant [GET]
+ Request (application/json)

    + header

            Authorization: Bearer JWT

+ Response 200 (application/json; charset=UTF-8)

  + body
            {
              "notifications":
                [
                  {                  
                    "msgID": "afe4fb7d-438f-41ca-a6b6-8f169264bee5",
                    "metaAttrsFilter": {
                        "level": 3,
                        "shouldPersist": true
                    },
                    "message": "Something went wrong.",
                    "subject": "user_notification",
                    "ts": "2021-09-23T17:16:52.873000Z"
                  },
                  {
                    "msgID": "9184afb0-8e77-45fb-abfa-5b59a052c3cf",
                    "metaAttrsFilter": {
                        "level": 2,
                        "shouldPersist": true
                    },
                    "message": "Something went wrong.",
                    "subject": "user_notification",
                    "ts": "2021-09-23T17:16:51.662000Z"
                  },
                  {
                    "msgID": "7c654c91-7d7b-403a-82ad-2880dcfce51d",
                    "metaAttrsFilter": {
                        "level": 1,
                        "shouldPersist": true
                    },
                    "message": "Something went wrong.",
                    "subject": "user_notification",
                    "ts": "2021-09-23T17:16:50.512000Z"
                  }
                ]
            }


